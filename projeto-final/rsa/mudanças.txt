1- criei arquivo de header e pras funções separadas, deixando no programa principal só a main

2- ifdef TESTE
coloquei um ifdef nos printfs porque pra arquivos muito grandes tava ficando impraticável kkkkkk pra imprimir tudo só descomentar o #define TESTE

3- coloquei a saída pra ser escrita num arquivo, pra gente verificar a corretude mais facilmente comparando o arquivo de saída com o original (no cmd do windows é "fc arquivo1 arquivo2", ai ele diz se encontrou diferenças ou não)

4- coloquei para serem passados na linha de comando: o nome do arquivo de entrada, o nome do arquivo de saida e o número de threads (ela pediu assim em todos os labs então achei melhor)

5- tirei o MAX_MSG_LEN pq quando coloquei a leitura pra ser feita a partir do arquivo, começou a dar erro. e a execução com um texto do tamanho desse limite de caracteres estava sendo muito rápida

6- botei um setLocale la pra suportar UTF-8 pq os textos tem caracteres especiais

7- baixei um programa de gerador de lero lero em python pra gerar os textos, ele gera vários textos de uma vez só e tem caracteres especiais https://github.com/MatheusMuriel/LeroLeroPy
execução: python lerolero.py [tamanho] [caracter/frases] [quantidadeArquivos] [taxaCrescimento] [nomearquivo]
[tamanho]: é o tamanho do texto
[caracter/frases]: define se o tamanho vai se referir à quantidade de caracteres ou de frases, ou seja, se o tamanho for 10 e você escolher frases, vai ter 10 frases. se escolher caracter, vai ter 10 caracteres. (pra nossa finalidade é melhor usarmos por quantidade de caracteres, então é só escrever “caracter” nesse campo. qualquer coisa diferente disso ele usa frase)
[quantidadedeArquivos]: quantos arquivos queremos que sejam gerados nessa execução
[taxaCrescimento]: uma taxa de crescimento len * x para mais de um arquivo gerado. por exemplo, se o tamanho for 10 caracteres e você pedir pra gerar 3 arquivos com taxa de crescimento igual a 2, o primeiro arquivo vai ter tamanho 10, o segundo 20 e o terceiro 40.
[nomearquivo]: nome do arquivo de saída. para mais de um arquivo gerado, o nome vai estar no formato nomearquivoX.txt, onde X é um número que começa em 1

8- medindo tempo de criptografia e descriptografia e depois o tempo total. achei importante medir o tempo de descriptografia também porque teve casos que eu testei onde o tempo de criptografia era zero mas o de descriptografia era um pouco maior

9- programa sequencial a parte

duvidas

1- ainda pensando se eh melhor os tempos serem armazenados num arquivo texto em formato csv pra criar uma tabela (usando redirecionamento e não arquivos em si pq já ta usando muito arquivo e é algo só pra fins de teste) e depois criar os gráficos de aceleração e eficiência ou se eh melhor imprimir num formato de vetor e depois fazer os gráficos no python

2- acho melhor ler a entrada e e escrever a saída em arquivos binários porque os textos vão ser muito grandes